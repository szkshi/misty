<?php
namespace Aura\Web;

/**
 * Test class for Response.
 * Generated by PHPUnit on 2011-05-02 at 10:30:39.
 */
class ResponseTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Response
     */
    protected $response;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->response = new Response;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }

    /**
     * @todo Implement testSetCache().
     */
    public function testSetAndGetCache()
    {
        // "add headers to turn off caching"
        $this->response->setCache(false);
        $this->assertFalse($this->response->getCache());
        $expect = [
          'Pragma' => 'no-cache',
          'Cache-Control' => [
            'no-store, no-cache, must-revalidate',
            'post-check=0, pre-check=0',
          ],
          'Expires' => '1',
        ];
        $actual = $this->response->getHeaders();
        $this->assertSame($expect, $actual);
        
        // "do not add cache-related headers"
        $this->response->setCache(null);
        $this->assertNull($this->response->getCache());
        $expect = [];
        $actual = $this->response->getHeaders();
        $this->assertSame($expect, $actual);
        
        // "undefined"
        $this->response->setCache(true);
        $this->assertTrue($this->response->getCache());
        $expect = [];
        $actual = $this->response->getHeaders();
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testSetContent().
     */
    public function testSetAndGetContent()
    {
        $expect = 'foo bar baz';
        $this->response->setContent($expect);
        $actual = $this->response->getContent();
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testSetContentType().
     */
    public function testSetAndGetContentType()
    {
        $expect = 'application/json';
        $this->response->setContentType($expect);
        $actual = $this->response->getContentType();
        $this->assertSame($expect, $actual);
        
        $expect = [
          'Content-Type' => 'application/json',
        ];
        $actual = $this->response->getHeaders();
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testSetCookie().
     */
    public function testSetAndGetCookie()
    {
        $expire = time() + 3600;
        $this->response->setCookie('foo', 'bar', $expire, '/path', 'example.com');
        
        $expect = [
          'value' => 'bar',
          'expire' => $expire,
          'path' => '/path',
          'domain' => 'example.com',
          'secure' => false,
          'httponly' => true,
        ];

        $actual = $this->response->getCookie('foo');
        
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testGetCookies().
     */
    public function testGetCookies()
    {
        $expire = time() + 3600;
        $this->response->setCookie('foo', 'bar', $expire, '/path', 'example.com');
        $this->response->setCookie('baz', 'dib', date('Y-m-d H:i:s', $expire), '/path', 'example.com');
        
        $expect = [
            'foo' => [
              'value' => 'bar',
              'expire' => $expire,
              'path' => '/path',
              'domain' => 'example.com',
              'secure' => false,
              'httponly' => true,
            ],
            'baz' => [
              'value' => 'dib',
              'expire' => $expire,
              'path' => '/path',
              'domain' => 'example.com',
              'secure' => false,
              'httponly' => true,
            ],
        ];

        $actual = $this->response->getCookies();
        
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testSetCookiesHttponly().
     */
    public function testSetCookiesHttponly()
    {
        $this->response->setCookiesHttponly(false);
        
        $expire = time() + 3600;
        $this->response->setCookie('foo', 'bar', $expire, '/path', 'example.com');
        
        $expect = [
          'value' => 'bar',
          'expire' => $expire,
          'path' => '/path',
          'domain' => 'example.com',
          'secure' => false,
          'httponly' => false,
        ];

        $actual = $this->response->getCookie('foo');
        
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testSetHeader().
     */
    public function testSetHeader()
    {
        $this->response->setHeader('foo-bar', 'baz');
        $this->response->setHeader('dib', 'zim');
        
        $expect = [
            'Foo-Bar' => 'baz',
            'Dib' => 'zim',
        ];
        
        $actual = $this->response->getHeaders();
        
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testAddHeader().
     */
    public function testAddHeader()
    {
        $this->response->addHeader('foo', 'bar');
        $this->response->addHeader('foo', 'baz');
        $this->response->addHeader('foo', 'dib');
        
        $expect = [
            'Foo' => ['bar', 'baz', 'dib'],
        ];
        
        $actual = $this->response->getHeaders();
        
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testGetHeader().
     */
    public function testGetHeader()
    {
        $this->response->setHeader('foo-bar', 'baz');
        $this->response->addHeader('dib', 'zim');
        $this->response->addHeader('dib', 'gir');
        
        $expect = 'baz';
        $actual = $this->response->getHeader('foo-bar');
        $this->assertSame($expect, $actual);
        
        $expect = ['zim', 'gir'];
        $actual = $this->response->getHeader('dib');
        $this->assertSame($expect, $actual);
        
        // no such header
        $this->assertNull($this->response->getHeader('no-such-header'));
    }

    /**
     * @todo Implement testGetHeaders().
     */
    public function testGetHeaders()
    {
        $this->response->setHeader('foo-bar', 'baz');
        $this->response->addHeader('dib', 'zim');
        $this->response->addHeader('dib', 'gir');
        
        $expect = [
          'Foo-Bar' => 'baz',
          'Dib' => [
            0 => 'zim',
            1 => 'gir',
          ],
        ];
        $actual = $this->response->getHeaders();
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testSetRedirect().
     */
    public function testRedirect()
    {
        $this->assertFalse($this->response->isRedirect());
        $this->response->setRedirect('http://example.com');
        $this->assertTrue($this->response->isRedirect());
        
        $expect = 'http://example.com';
        $actual = $this->response->getRedirect();
        $this->assertSame($expect, $actual);
        
        $expect = [
          'Location' => 'http://example.com',
        ];
        $actual = $this->response->getHeaders();
        $this->assertSame($expect, $actual);
    }
    
    /**
     * @todo Implement testSetRedirectAfterPost().
     */
    public function testRedirectAfterPost()
    {
        $this->assertFalse($this->response->isRedirect());
        $this->response->setRedirectAfterPost('http://example.com');
        $this->assertTrue($this->response->isRedirect());
        
        $expect = 'http://example.com';
        $actual = $this->response->getRedirect();
        $this->assertSame($expect, $actual);
        
        $expect = [
          'Pragma' => 'no-cache',
          'Cache-Control' => 
          [
            0 => 'no-store, no-cache, must-revalidate',
            1 => 'post-check=0, pre-check=0',
          ],
          'Expires' => '1',
          'Location' => 'http://example.com',
        ];
        $actual = $this->response->getHeaders();
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testSetStatusCode().
     */
    public function testSetAndGetStatusCode()
    {
        $expect = 404;
        $this->response->setStatusCode($expect);
        $actual = $this->response->getStatusCode();
        $this->assertSame($expect, $actual);
    }
    
    public function testSetStatusCodeWrong()
    {
        $this->setExpectedException('Aura\Web\Exception');
        $this->response->setStatusCode('88');
    }
    
    /**
     * @todo Implement testSetStatusText().
     */
    public function testSetAndGetStatusText()
    {
        $expect = 'Not Found';
        $this->response->setStatusText($expect);
        $actual = $this->response->getStatusText();
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testSetVersion().
     */
    public function testSetAndGetVersion()
    {
        $expect = '1.1';
        $this->response->setVersion($expect);
        $actual = $this->response->getVersion();
        $this->assertSame($expect, $actual);
    }

    public function testVersionWrong()
    {
        $this->setExpectedException('Aura\Web\Exception');
        $this->response->setVersion('88');
    }
}
